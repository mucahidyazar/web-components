{"version":3,"sources":["../../src/Paragraph.js"],"names":["React","PropTypes","S","ParagraphSize","Paragraph","children","copyable","editable","paragraphRef","props","paragraphProps","propTypes","oneOfType","node","string","bool","object","size","oneOf","Object","values","row","number","ellipsis","defaultProps","MEDIUM","constants"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,KAAKC,CAAZ,MAAmB,SAAnB;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,SAASC,SAAT,OAA6E;AAAA,MAA1D;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,GAA0D;AAAA,MAATC,KAAS;;AAC3E,MAAMC,cAAc,gBAAQD,KAAR;AAAeF,IAAAA;AAAf,IAApB;;AAEA,sBACE,oBAAC,CAAD,CAAG,SAAH;AAAa,mBAAY;AAAzB,KAAyCG,cAAzC,gBACE,oBAAC,CAAD,CAAG,aAAH;AACE,IAAA,eAAe,EAAEH,QADnB;AAEE,IAAA,8BAA8B;AAFhC,KAIGF,QAJH,CADF,EAOGC,QAAQ,iBACP,oBAAC,CAAD,CAAG,cAAH;AACE,IAAA,GAAG,EAAEE,YADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,YAAY,EAAEH;AAHhB,IARJ,CADF;AAiBD;;AAEDD,SAAS,CAACO,SAAV,GAAsB;AACpBN,EAAAA,QAAQ,EAAEJ,SAAS,CAACW,SAAV,CAAoB,CAACX,SAAS,CAACY,IAAX,EAAiBZ,SAAS,CAACa,MAA3B,CAApB,CADU;AAEpBP,EAAAA,QAAQ,EAAEN,SAAS,CAACc,IAFA;AAGpBT,EAAAA,QAAQ,EAAEL,SAAS,CAACc,IAHA;AAIpBP,EAAAA,YAAY,EAAEP,SAAS,CAACe,MAJJ;AAKpBC,EAAAA,IAAI,EAAEhB,SAAS,CAACiB,KAAV,CAAgBC,MAAM,CAACC,MAAP,CAAcjB,aAAd,CAAhB,CALc;AAMpBkB,EAAAA,GAAG,EAAEpB,SAAS,CAACqB,MANK;AAOpBC,EAAAA,QAAQ,EAAEtB,SAAS,CAACc;AAPA,CAAtB;AAUAX,SAAS,CAACoB,YAAV,GAAyB;AACvBjB,EAAAA,QAAQ,EAAE,KADa;AAEvBD,EAAAA,QAAQ,EAAE,KAFa;AAGvBD,EAAAA,QAAQ,EAAE,IAHa;AAIvBG,EAAAA,YAAY,EAAE,IAJS;AAKvBS,EAAAA,IAAI,EAAEd,aAAa,CAACsB,MALG;AAMvBJ,EAAAA,GAAG,EAAE,CANkB;AAOvBE,EAAAA,QAAQ,EAAE;AAPa,CAAzB;AAUAnB,SAAS,CAACF,CAAV,GAAcA,CAAd;AACAE,SAAS,CAACsB,SAAV,GAAsB;AAAEvB,EAAAA;AAAF,CAAtB;AAEA,eAAeC,SAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport * as S from \"./style\";\r\nimport { ParagraphSize } from \"./constants\";\r\n\r\nfunction Paragraph({ children, copyable, editable, paragraphRef, ...props }) {\r\n  const paragraphProps = { ...props, editable };\r\n\r\n  return (\r\n    <S.Paragraph data-testid=\"paragraph\" {...paragraphProps}>\r\n      <S.ParagraphText\r\n        contentEditable={editable}\r\n        suppressContentEditableWarning\r\n      >\r\n        {children}\r\n      </S.ParagraphText>\r\n      {copyable && (\r\n        <S.ParagraphInput\r\n          ref={paragraphRef}\r\n          type=\"text\"\r\n          defaultValue={children}\r\n        />\r\n      )}\r\n    </S.Paragraph>\r\n  );\r\n}\r\n\r\nParagraph.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\r\n  editable: PropTypes.bool,\r\n  copyable: PropTypes.bool,\r\n  paragraphRef: PropTypes.object,\r\n  size: PropTypes.oneOf(Object.values(ParagraphSize)),\r\n  row: PropTypes.number,\r\n  ellipsis: PropTypes.bool,\r\n};\r\n\r\nParagraph.defaultProps = {\r\n  editable: false,\r\n  copyable: false,\r\n  children: null,\r\n  paragraphRef: null,\r\n  size: ParagraphSize.MEDIUM,\r\n  row: 0,\r\n  ellipsis: false,\r\n};\r\n\r\nParagraph.S = S;\r\nParagraph.constants = { ParagraphSize };\r\n\r\nexport default Paragraph;\r\n"],"file":"Paragraph.js"}